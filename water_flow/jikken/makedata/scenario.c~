#include <stdio.h>
#include "file.h"

#define LEN 10000
#define CLASS 4
#define TERM 2
//#define CNUM 27 // CLASS^TERM

double windClass[CLASS] = {2.5, 6.0, 8.0, 20.0};

int readData(FILE* fp_data, float *data){
  float val;
  int i = 0;

  while(fscanf(fp_data, "%f", &val) != EOF){
	  data[i++] = val;
  }

  return i;
}

int getClassNum(float val){
  /*
  if(val < 2.5)       { return 0; }
  else if(val < 6)  { return 1; }
  else if(val < 8)  { return 2; }
  //else if(val < 4.0)  { return 3; }
  //else if(val < 5.0)  { return 4; }
  else                { return 9; }
  */
  int i;
  for(i = 0; i < CLASS; i++){
    if(val < windClass[i]) { return i; }
  }
  return 9;
}

double getPowerVal(int i){
  double a1 = 0.4 * 0.5 * 1.225 * 3217.0 * 0.8 * 21.0 / 1000.0;
  double a2;

  printf("i = %d\n", i);
  i = (i + 3) % 4;

  if(i == 0) { a2 = windClass[0]; }
  else if (i < CLASS - 1) { a2 = (windClass[i - 1] + windClass[i]) / 2.0; }
  else { a2 = windClass[CLASS - 1]; }
  printf("a2 = %f\n", a2);

  return a1 * a2 * a2 * a2;
}

int getResultNum(int *a){
  int i, r = 0;
  for(i = 0; i < TERM; i++) { r = r * CLASS + a[-i]; } // -i で OK!
  return r;
}

int main(){
  FILE *fp_data, *mydata;
  float data[LEN];
  int classNum[LEN];
  int class[LEN];
  double prod[LEN];
  int prev[LEN];
  int head, i, j, k, n, r;
  int idx[TERM + 1];
  double p;

  fp_data = FILEOPEN("./mutsu_2010.txt", "r");
  n = readData(fp_data, data);
  //printf("%d\n", n);
  fclose(fp_data);

  idx[0] = 0;
  for(i = k = 1; i <= TERM; i++){
    k *= CLASS;
    idx[i] = idx[i - 1] + k;
    //printf("idx %d = %d\n", i, idx[i]);
  }

  for(i = 0; i < LEN; i++){
	  classNum[i] = 0;
	  prod[i] = 0.0;
	  prev[i] = 0;
  }

  for(i = 0; i < n; i++){
	  class[i] = getClassNum(data[i]);
  }

  for(i = TERM - 1; i < n; i++){
    r = getResultNum(&class[i]);
    classNum[r]++;
    //printf("%d: %d\n", i, r);
  }

  //  for(i = 0; i < CNUM; i++){
  //    printf("Class %d: %f\n", i, (float)classNum[i] / (n - TERM + 1) );
  //  }

  // final term
  p = 0.0;
  for(i = 0; i < idx[TERM] - idx[TERM - 1]; i++){
    prod[i + idx[TERM - 1]] = (double)classNum[i] / (n - TERM + 1);
    printf("class %d: %f\n", i + idx[TERM - 1], prod[i + idx[TERM - 1]]);
    p += prod[i + idx[TERM - 1]];
  }
  printf("p = %f\n", p);

  // another term
  for(i = TERM - 1; i > 0; i--){
    head = idx[i];
    p = 0.0;
    for(j = 0; j < idx[i] - idx[i - 1]; j++){
      for(k = 0; k < CLASS; k++){
	prev[head + 1] = j + idx[i - 1] + 1;
	prod[j + idx[i - 1]] += prod[head++];
      }
      printf("class %d: %f\n", j + idx[i - 1], prod[j + idx[i - 1]]);
      p += prod[j + idx[i - 1]];
    }
    printf("p = %f\n", p);
  }

  mydata = FILEOPEN("./tmp.dat", "w");

  // set T
  fprintf(mydata, "set T :=");
  for(i = 0; i <= TERM; i++) { fprintf(mydata, " %d", i); }
  fprintf(mydata, ";\n");

  // set S
  fprintf(mydata, "set S :=");
  for(i = 0; i <= idx[TERM]; i++) { fprintf(mydata, " %d", i); }
  fprintf(mydata, ";\n");

  // Tnum
  fprintf(mydata, "param Tnum := %d;\n", TERM);

  // c
  fprintf(mydata, "param c :");
  for(i = 0; i <= idx[TERM]; i++) { fprintf(mydata, " %d", i); }
  fprintf(mydata, " :=\n");
  fprintf(mydata, "0    1");
  for(i = 1; i <= idx[TERM]; i++){ fprintf(mydata, " 0"); }
  fprintf(mydata, "\n");
  for(i = 1; i <= TERM; i++){
    fprintf(mydata, "%d   ", i);
    for(j = 0; j <= idx[TERM]; j++){
      fprintf(mydata, " %d", (idx[i - 1] < j && j <= idx[i]) ? 1 : 0);
    }
    fprintf(mydata, "\n");
  }
  fprintf(mydata, ";\n");

  // ps
  fprintf(mydata, "param ps := \n");
  for(i = 0; i <= idx[TERM]; i++) { fprintf(mydata, "%d %d\n", i, prev[i]); }
  fprintf(mydata, ";\n");

  // prod
  fprintf(mydata, "param prod: ");
  for(i = 0; i <= idx[TERM]; i++) { fprintf(mydata, " %d", i); }
  fprintf(mydata, " :=\n");
  fprintf(mydata, "0    1");
  for(i = 1; i <= idx[TERM]; i++){ fprintf(mydata, " 0"); }
  fprintf(mydata, "\n");
  for(i = 1; i <= TERM; i++){
    fprintf(mydata, "%d   ", i);
    for(j = 0; j <= idx[TERM]; j++){
      fprintf(mydata, " %f", (idx[i - 1] < j && j <= idx[i]) ? prod[j - 1] : 0);
    }
    fprintf(mydata, "\n");
  }
  fprintf(mydata, ";\n");
  
  // v
  fprintf(mydata, "param v: ");
  for(i = 0; i <= idx[TERM]; i++) { fprintf(mydata, " %d", i); }
  fprintf(mydata, " :=\n");
  fprintf(mydata, "0    0");
  for(i = 1; i <= idx[TERM]; i++){ fprintf(mydata, " 0"); }
  fprintf(mydata, "\n");
  for(i = 1; i <= TERM; i++){
    fprintf(mydata, "%d   ", i);
    for(j = 0; j <= idx[TERM]; j++){
      fprintf(mydata, " %f", (idx[i - 1] < j && j <= idx[i]) ? getPowerVal(j % CLASS) : 0);
    }
    fprintf(mydata, "\n");
  }
  fprintf(mydata, ";\n");

  fclose(mydata);

  // another file: M1, M2, price, C, cpd, allow_prod_1, _2, allow_vl, _vu
  
  return 0;
}
